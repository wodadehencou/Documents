<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0157)http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=/netahtml/srchnum.htm&r=1&f=G&l=50&s1=6298369.WKU.&OS=PN/6298369&RS=PN/6298369 -->
<HTML><HEAD><TITLE>United States Patent: 6,298,369</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META content="MSHTML 6.00.2800.1505" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff><A name=top></A>
<CENTER><IMG 
alt="[US Patent &amp; Trademark Office, Patent Full Text and Image Database]" 
src="United States Patent 6,298,369.files/patfthdr.gif"> <BR><!-- <IMG border=0 src=/netaicon/PTO/titlebar.gif><br> -->
<TABLE>
  <TBODY>
  <TR>
    <TD align=middle><A href="http://www.uspto.gov/patft/index.html"><IMG 
      alt=[Home] src="United States Patent 6,298,369.files/home.gif" border=0 
      valign="middle"></A> <A 
      href="http://patft.uspto.gov/netahtml/search-bool.html"><IMG 
      alt="[Boolean Search]" 
      src="United States Patent 6,298,369.files/boolean.gif" border=0 
      valign="middle"></A> <A 
      href="http://patft.uspto.gov/netahtml/search-adv.htm"><IMG 
      alt="[Manual Search]" 
      src="United States Patent 6,298,369.files/manual.gif" border=0 
      valign="middle"></A> <A 
      href="http://patft.uspto.gov/netahtml/srchnum.htm"><IMG 
      alt="[Number Search]" 
      src="United States Patent 6,298,369.files/number.gif" border=0 
      valign="middle"></A> <A 
      href="http://www.uspto.gov/patft/help/help.htm"><IMG alt=[Help] 
      src="United States Patent 6,298,369.files/help.gif" border=0 
      valign="middle"></A> </TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&amp;Sect2=HITOFF&amp;d=PALL&amp;p=1&amp;u=/netahtml/srchnum.htm&amp;r=1&amp;f=G&amp;l=50&amp;s1=6298369.WKU.&amp;OS=PN/6298369&amp;RS=PN/6298369#bottom"><IMG 
      alt=[Bottom] src="United States Patent 6,298,369.files/bottom.gif" 
      border=0 valign="middle"></A> </TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://ebiz1.uspto.gov/vision-service/ShoppingCart_P/ShowShoppingCart?backUrl1=http%3A//164.195.100.11/netacgi/nph-Parser?Sect1%3DPTO1%26Sect2%3DHITOFF%26d%3DPALL%26p%3D1%26u%3D%2Fnetahtml%2Fsrchnum.htm%26r%3D1%26f%3DG%26l%3D50%26s1%3D6298369.WKU.%26OS%3DPN%2F6298369&amp;backLabel1=Back%20to%20Document%3A%206,298,369"><IMG 
      alt="[View Shopping Cart]" 
      src="United States Patent 6,298,369.files/cart.gif" border=0 
      valign="middle"></A> <A 
      href="http://ebiz1.uspto.gov/vision-service/ShoppingCart_P/AddToShoppingCart?docNumber=6,298,369&amp;backUrl1=http%3A//164.195.100.11/netacgi/nph-Parser?Sect1%3DPTO1%26Sect2%3DHITOFF%26d%3DPALL%26p%3D1%26u%3D%2Fnetahtml%2Fsrchnum.htm%26r%3D1%26f%3DG%26l%3D50%26s1%3D6298369.WKU.%26OS%3DPN%2F6298369&amp;backLabel1=Back%20to%20Document%3A%206,298,369"><IMG 
      alt="[Add to Shopping Cart]" 
      src="United States Patent 6,298,369.files/order.gif" border=0 
      valign="middle"></A> </TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://patimg2.uspto.gov/.piw?Docid=06298369&amp;homeurl=http%3A%2F%2Fpatft.uspto.gov%2Fnetacgi%2Fnph-Parser%3FSect1%3DPTO1%2526Sect2%3DHITOFF%2526d%3DPALL%2526p%3D1%2526u%3D%2Fnetahtml%2Fsrchnum.htm%2526r%3D1%2526f%3DG%2526l%3D50%2526s1%3D6298369.WKU.%2526OS%3DPN%2F6298369%2526RS%3DPN%2F6298369&amp;PageNum=&amp;Rtype=&amp;SectionNum=&amp;idkey=335BCBFD7DE3"><IMG 
      alt=[Image] src="United States Patent 6,298,369.files/image.gif" border=0 
      valign="middle"></A> <!-- <A HREF=""><img border=0 src="/netaicon/PTO/patbib.gif" valign=middle></A>
<BR><FONT SIZE=4 COLOR="#CC3300">F</FONT><FONT SIZE=2 COLOR="#CC3300">ULL </FONT><FONT SIZE=4 COLOR="#CC3300">T</FONT><FONT SIZE=2 COLOR="#CC3300">EXT </FONT><FONT SIZE=4 COLOR="#CC3300">F</FONT><FONT SIZE=2 COLOR="#CC3300">ORMAT</FONT></STRONG> --></TD></TR></TBODY></TABLE></CENTER>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD align=left width="50%">&nbsp;</TD>
    <TD vAlign=bottom align=right width="50%"><FONT size=-1>( 
      <STRONG>1</STRONG></FONT> <FONT size=-2>of</FONT> <STRONG><FONT 
      size=-1>1</STRONG> )</FONT></TD></TR></TBODY></TABLE>
<HR>

<TABLE width="100%">
  <TBODY>
  <TR>
    <TD align=left width="50%"><B>United States Patent </B></TD>
    <TD align=right width="50%"><B><B><I>6,298,369</I></B> </B></TD></TR>
  <TR>
    <TD align=left width="50%"><B>Nguyen </B><!-- 2: Nguyen; Thi N.
,
,
,
<br>Nguyen, ;, , ,  --></TD>
    <TD align=right width="50%"><B>October 2, 2001 </B></TD></TR></TBODY></TABLE>
<HR>
<FONT size=+1>High speed multiplier </FONT><BR><BR>
<CENTER><B>Abstract</B></CENTER>
<P>The high speed multiplier takes advantage of results from previous 
calculations by recognizing that in many cases the multiplicand between a first 
and second multiplication differs only slightly. Thus, the present system 
divides the multiplicand into a cache lookup bit (CLB) and a table lookup bit 
(TLB). The results of a first multiplication are stored in a cache. The CLB of a 
of the multiplicand in the second multiplication is then compared to the CLB of 
the multiplicand in the second multiplication. If the CLB matches, the product 
of the first multiplication is retrieved. The product of the TLB of the 
multiplicand and the multiplier is then retrieved from a lookup table and either 
added or subtracted from the retrieved product. </P>
<HR>

<TABLE width="100%">
  <TBODY>
  <TR>
    <TD vAlign=top align=left width="10%">Inventors: </TD>
    <TD align=left width="90%"><B>Nguyen; Thi N.</B> (Carrollton, TX) </TD></TR>
  <TR>
    <TD vAlign=top align=left width="10%">Assignee: </TD>
    <TD align=left width="90%"><B>STMicroelectronics, Inc.</B> (Carrollton, 
      TX) </TD></TR>
  <TR>
    <TD vAlign=top noWrap align=left width="10%">Appl. No.: </TD>
    <TD align=left width="90%"><B>164027</B></TD></TR>
  <TR>
    <TD vAlign=top align=left width="10%">Filed: </TD>
    <TD align=left width="90%"><B>September 30, 1998</B></TD></TR></TBODY></TABLE>
<P>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD vAlign=top align=left width="40%"><B>Current U.S. Class:</B></TD>
    <TD vAlign=top align=right width="60%"><B>708/620</B>; 708/625 </TD></TR>
  <TR>
    <TD vAlign=top align=left width="40%"><B>Intern'l Class: </B></TD>
    <TD vAlign=top align=right width="60%">G06F 007/52</TD></TR>
  <TR>
    <TD vAlign=top align=left width="40%"><B>Field of Search: </B></TD>
    <TD vAlign=top align=right width="60%">708/490,503,620,625,628 
  </TD></TR></TBODY></TABLE>
<HR>

<CENTER><B>References Cited <A 
href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-adv.htm&amp;r=0&amp;f=S&amp;l=50&amp;d=CR01&amp;Query=ref/6,298,369">[Referenced 
By]</A></B></CENTER>
<HR>

<CENTER><B>U.S. Patent Documents</B></CENTER>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F4573136">4573136</A></TD>
    <TD width="25%">Feb., 1986</TD>
    <TD align=left width="25%">Rossiter</TD>
    <TD align=right width="25%">708/603. </TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F4611305">4611305</A></TD>
    <TD width="25%">Sep., 1986</TD>
    <TD align=left width="25%">Iwase</TD>
    <TD align=right width="25%">364/736. </TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F4864529">4864529</A></TD>
    <TD width="25%">Sep., 1989</TD>
    <TD align=left width="25%">Shah et al. </TD>
    <TD align=right width="25%"></TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F5117385">5117385</A></TD>
    <TD width="25%">May., 1992</TD>
    <TD align=left width="25%">Gee</TD>
    <TD align=right width="25%">708/625. </TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F5150320">5150320</A></TD>
    <TD width="25%">Sep., 1992</TD>
    <TD align=left width="25%">Nakayama</TD>
    <TD align=right width="25%">364/748. </TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F5255216">5255216</A></TD>
    <TD width="25%">Oct., 1993</TD>
    <TD align=left width="25%">Blanz et al.</TD>
    <TD align=right width="25%">708/625. </TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F5260898">5260898</A></TD>
    <TD width="25%">Nov., 1993</TD>
    <TD align=left width="25%">Richardson</TD>
    <TD align=right width="25%">708/490. </TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F5343416">5343416</A></TD>
    <TD width="25%">Aug., 1994</TD>
    <TD align=left width="25%">Eisig et al. </TD>
    <TD align=right width="25%"></TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F5715187">5715187</A></TD>
    <TD width="25%">Feb., 1998</TD>
    <TD align=left width="25%">Chen et al.</TD>
    <TD align=right width="25%">708/620. </TD></TR>
  <TR>
    <TD width="25%"><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect2=PTO1&amp;Sect2=HITOFF&amp;p=1&amp;u=%2Fnetahtml%2Fsearch-bool.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PALL&amp;RefSrch=yes&amp;Query=PN%2F5828591">5828591</A></TD>
    <TD width="25%">Oct., 1998</TD>
    <TD align=left width="25%">Rotstain. </TD>
    <TD align=right width="25%"></TD></TR>
  <TR>
    <TD align=middle colSpan=4><B>Foreign Patent Documents</B></TD></TR>
  <TR>
    <TD width="25%">2 184 269</TD>
    <TD width="25%">Jun., 1987</TD>
    <TD align=left width="25%">GB. </TD>
    <TD align=right width="25%"></TD></TR></TBODY></TABLE><BR><I>Primary 
Examiner:</I> Ngo; Chuong Dinh <BR><I>Attorney, Agent or Firm:</I> Galanthay; 
Theodore E., Jorgenson; Lisa K., Munck; William A. <BR>
<HR>

<CENTER><B><I>Claims</B></I></CENTER>
<HR>
<BR><BR>I claim: <BR><BR>1. A high speed multiplier for calculating the product 
of a variable N-bit multiplicand and an M-bit constant comprising: <BR><BR>(a) a 
memory for storing a first multiplication result equal to a product of a first 
N-bit multiplicand and the M-bit constant, said memory further capable of 
retrieving the first multiplication result using a cache lookup bit (CLB) 
portion of a second N-bit multiplicand; <BR><BR>(b) a lookup table circuit 
containing a plurality of sub-products, wherein a first sub-product is equal to 
a product of the M-bit constant and a first difference value, the first 
difference value associated with a difference between a first table lookup bit 
(TLB) portion of the first N-bit multiplicand and a second TLB portion of the 
second N-bit multiplicand; and <BR><BR>(c) a summation circuit capable of adding 
the first sub-product to the first multiplication result to thereby produce a 
second multiplication result equal to a product of the M-bit constant and the 
second N-bit multiplicand. <BR><BR>2. The high speed multiplier of claim 1, 
wherein the summation circuit is further capable of subtracting the first 
sub-product from the first multiplication result to thereby produce the second 
multiplication result. <BR><BR>3. The high speed multiplier of claim 2 wherein 
the memory is a cache memory. <BR><BR>4. The high speed multiplier of claim 2 
wherein the memory is a content addressable memory (CAM). <BR><BR>5. The high 
speed multiplier of claim 1 further comprising a conventional multiplier for use 
when the CLB portion of the second N-bit multiplicand does not match a CLB 
portion of the first N-bit multiplicand. <BR><BR>6. The high speed multiplier of 
claim 1 wherein the lookup table circuit comprises a random access memory (RAM). 
<BR><BR>7. A digital signal processor comprising: <BR><BR>a high speed 
multiplier for calculating the product of a variable N-bit multiplicand and an 
M-bit constant comprising: <BR><BR>(a) a memory for storing a first 
multiplication result equal to a product of a first N-bit multiplicand and the 
M-bit constant, said memory further capable of retrieving the first 
multiplication result using a cache lookup bit (CLB) portion of a second N-bit 
multiplicand; <BR><BR>(b) a lookup table circuit containing a plurality of 
sub-products, wherein a first sub-product is equal to a product of the M-bit 
constant and a first difference value, the first difference value associated 
with a difference between a first table lookup bit (TLB) portion of the first 
N-bit multiplicand and a second TLB portion of the second N-bit multiplicand; 
and <BR><BR>(c) a summation circuit capable of adding the first sub-product to 
the first multiplication result to thereby produce a second multiplication 
result equal to a product of the M-bit constant and the second N-bit 
multiplicand. <BR><BR>8. The digital signal processor of claim 7, wherein the 
summation circuit is further capable of subtracting the first sub-product from 
the first multiplication result to thereby produce the second multiplication 
result. <BR><BR>9. The digital signal processor of claim 8 wherein the memory is 
a cache memory. <BR><BR>10. The digital signal processor of claim 8 wherein the 
memory is a content addressable memory (CAM). <BR><BR>11. The digital signal 
processor of claim 7 further comprising a conventional multiplier for use when 
the CLB portion of the second N-bit multiplicand does not match a CLB portion of 
the first N-bit multiplicand. <BR><BR>12. The digital signal processor of claim 
7 wherein the lookup table circuit comprises a random access memory (RAM). 
<BR><BR>13. A method of calculating the product of a variable N-bit multiplicand 
and an M-bit constant comprising the steps of: <BR><BR>storing a first 
multiplication result equal to a product of a first N-bit multiplicand and the 
M-bit constant in a memory; <BR><BR>retrieving from the memory the first 
multiplication result using a cache lookup bit (CLB) portion of a second N-bit 
multiplicand; <BR><BR>retrieving from a lookup table circuit a first sub-product 
equal to a product of the M-bit constant and a first difference value, the first 
difference value associated with a difference between a first table lookup bit 
(TLB) portion of the first N-bit multiplicand and a second TLB portion of the 
second N-bit multiplicand; and <BR><BR>adding the first sub-product to the first 
multiplication result to thereby produce a second multiplication result equal to 
a product of the M-bit constant and the second N-bit multiplicand. <BR><BR>14. 
The method of claim 13 further comprising the step of subtracting the first 
sub-product from the first multiplication result to thereby produce the second 
multiplication result. <BR><BR>15. The method of claim 14 wherein the memory is 
a cache memory. <BR><BR>16. The method of claim 14 wherein the memory is a 
content addressable memory (CAM). <BR><BR>17. The method of claim 13 wherein the 
lookup table circuit comprises a random access memory (RAM). 
<HR>

<CENTER><B><I>Description</B></I></CENTER>
<HR>
<BR><BR>BACKGROUND OF THE INVENTION <BR><BR>1. Technical Field <BR><BR>The 
present invention relates to a high speed multiplier and specifically to a high 
speed multiplier that utilizes cache memory searches for previous results. The 
multiplier would be well suited for various digital signal processing (DSP) 
applications, <BR><BR>2. Description of the Related Art <BR><BR>Besides 
addition, multiplication is a very heavily used core operation for signal 
processing. To achieve high throughput, fast multiplications are required. The 
multiplication of two unsigned numbers A and B creates the product P 
<BR><BR>P=A*B <BR><BR>where A is called the multiplicand and B the multiplier. 
Given that A is an m-bit positive whole number and B is an n-bit positive whole 
number, then the numeric representation of the product P requires (m+n) bits. 
<BR><BR>In digital signal processing (DSP) system, there is always a demand for 
fast multiplication. For example, an N-tap with M-bit per tap FIR filter 100, 
shown in FIG. 1, requires N.times.M multiplications. A multiplicand X.sub.n 102 
is multiplied by a first coefficient C1 106, while X.sub.n-1 112, the output of 
the Z.sup.-1 operator, is multiplied by a second coefficient C2 108, and 
X.sub.n-2 114, the output from a second Z.sup.-1 operator, is multiplied by a 
third coefficient C3 110. The results of each multiplication are summed 116 to 
produce the output value Y.sub.n 104. <BR><BR>For a real-time DSP application, 
the Nyquist theory dictates that the sampling rate of a system (Fs) is twice the 
bandwidth of the system (Fs=2F). Thus, higher system bandwidth requires faster 
multiplication operations. There are many hardware implementations of parallel 
multipliers. However, the basic design for each multiplier is an add and shift 
algorithm. This algorithm generates a partial product, using Booth's algorithm 
for example, and then adding a partial product using a ROM look up table. For a 
very basic implementation of the multiplier is consisting of a fast adder, 
multiplexer (mux) and shift register. An example of a 4.times.4 multiplier is 
following: ##EQU1## <BR><BR>Two registers 202, 204 are used to hold the value of 
the multiplier and the multiplicand as shown in FIG. 2. The multiplier register 
202 is shifted into the control logic. If multiplier bit n is a zero, the 
multiplexer (mux) 216 will select a zero output. Otherwise the mux will select 
the multiplicand output. The shift register will shift the mux output to n-1 bit 
to the left. The adder 212 will add this with the partial register 210 that has 
the initial value of zero. After N iterations the adder 212 will output the 
final product 214 From the above example, there are N iterations for an 
N.times.N multiple. Thus, for a 30-bit by 30-bit multiplication, there would be 
30 iterations. Likewise, for a 60.times.60 multiplication, there would be 60 
iterations. A need exists to perform these multiplications with fewer 
iterations. <BR><BR>SUMMARY OF THE INVENTION <BR><BR>The present invention 
recognizes that in many circumstances, several multiplication operations are 
conducted as part of a sequence. The multiplier may be the same for each 
operation while the multiplicand differs only slightly. The method used to 
improve the speed of multiplication operations involves dividing the 
multiplicand into two portions. The first portion is referred to as a cache 
lookup bit (CLB), while the second portion is referred to as a table lookup bit 
(TLB). For example, a 30 bit multiplicand could be divided into a 24 bit CLB and 
a 6 bit TLB. Of course, the lengths of the CLB and TLB can be varied. When a 
first multiplication operation is performed, its result is stored in cache 
memory. When the second multiplication is performed, then the method first 
compares the CLB of the multiplicand with the previous multiplicand. If the 
CLB's match, also known as a cache hit, the output data from the cache will 
add/sub with a value pulled from the TLB RAM lookup for a final product. The RAM 
lookup table is simply a multiplication table. For example, if the TLB is 4 bits 
in length then the table will contain the results of values 0 to 16 multiplied 
with C1. <BR><BR>The decision to add or subtract is made from the comparison 
between the multiplicand TLB and cache TLB address bit. If the multiplicand TLB 
bit is smaller than the cache TLB address bit, then a subtract operation will be 
performed. If the TLB bit is equal to the cache TLB bit, then cache output is 
the final product. If it is bigger, then an add operation will be performed. If 
no cache hit occurs, also known as a cache miss, then a conventional multiplier 
will be used to perform the multiplication. The output data from the multiplier 
can still be used to update the cache and the final product. <BR><BR>BRIEF 
DESCRIPTION OF THE DRAWINGS <BR><BR>The novel features believed characteristic 
of the invention are set forth in the appended claims. The invention itself 
however, as well as a preferred mode of use, further objects and advantages 
thereof, will best be understood by reference to the following detailed 
description of an illustrative embodiment when read in conjunction with the 
accompanying drawings, wherein: <BR><BR>FIG. 1 illustrates a 3-Tap FIR Filter 
that would benefit from the present invention; <BR><BR>FIG. 2 illustrates a 
prior art shift-add multiplier design; <BR><BR>FIG. 3 is a block diagram of the 
present invention showing the multiplier and multiplicand undergoing a 
multiplication operation to yield a final product; <BR><BR>FIG. 4 provides one 
illustration of how a 30-bit multiplicand can be divided into a cache lookup bit 
(CLB) and a table lookup bit (TLB) portion; and <BR><BR>FIGS. 5a, 5b, and 5c 
illustrate the block logic and paths taken with a cache hit and a cache miss 
operation. <BR><BR>DETAILED DESCRIPTION OF THE DRAWINGS <BR><BR>A higher speed 
multiplier is possible when one recognizes that many sequential multiplications 
can take advantage of the results of earlier multiplications saved in cache 
memory. In its most basic form, FIG. 3 illustrates the present invention. The 
high speed multiplier 300 utilizes a multiplier circuit 306. This multiplier 
circuit 306 operates on a multiplicand 302 and a multiplier 304. In this 
illustration, the multiplier is designated as a constant. The output is 
delivered on line 308. However, the output varies with each iteration during the 
multiplication. Thus, a data valid line 310 is also provided. The data valid 
line will show a distinct value, such as true, once the necessary number of 
iterations have occurred. Once this distinct value is detected, then the result 
on line 308 is the final product. <BR><BR>FIG. 4 shows an example multiplicand 
400 of 30-bit length. The multiplicand is divided into a cache lookup bit (CLB) 
portion 402 and a table lookup bit (TLB) portion 404. When sequential 
multiplicands are close in value, the CLB portion 402 will not change. More 
importantly, the CLB portion of the product will not change either. This fact 
allows for a reduction in the number of iterations required to reach the final 
product. <BR><BR>FIG. 5a illustrates a circuit that could be used to implement 
the method 500 of the present invention. As mentioned above, in most DSP 
multiplications, the CLB of the multiplicand 502 will show less variation than 
the TLB. Thus, the value of the CLB from a previous multiplication can be stored 
in high speed cache 504. Alternatively, it could be stored in a content 
addressable memory (CAM). For every multiplicand entered, the cache will be 
checked to see if the CLB of the multiplicand of the present multiplication is 
the same as the CLB of the previous operations multiplicand. A cache hit occurs 
when the CLBs match. If a cache hit occurs, the output data from the cache will 
add/sub 512 with the TLB RAM lookup 510 for a final product 514. The decision to 
add or sub is made from the comparison between the multiplicand TLB and cache 
TLB. If the multiplicand TLB is smaller than the cache TLB, then a subtract 
operation will be performed. If the multiplicand TLB is equal to the cache TLB, 
then cache output is the final product. If it is bigger, then an add operation 
will be performed. If no cache hit occurs, also known as a cache miss, then a 
conventional multiplier 506 will be used to perform the multiplication. The 
output data from the multiplier can still be used to update the cache and the 
final product. <BR><BR>The RAM lookup table 510 is simply a multiplication 
table. For example, if the TLB is 4 bits in length then the table will contain 
the results of values 0 to 16 multiplied with C1. For example, address 0 will 
contain the value of 0*C1, address 1 will contain the result of 1*C1 and so 
forth. If the TLB is 4-bit, there is 16.times.33 RAM, a respectively small 
amount of memory. <BR><BR>The following example demonstrates the steps involved 
with either a cache hit or a cache miss. First, define Xn=0.times.0340h and 
C1=0.times.54h. The desired output is the value of Xn multiplied by C1. Note 
that the CLB is 0.times.034 and the TLB is 0.times.0. Assuming a cache miss, as 
shown in FIG. 5b, then the multiplier outputs the final product 0.times.11100. 
The cache is updated with address 0.times.0340, the CLB of the initial 
multiplicand, and data 0.times.11100. The next operation involves the 
multiplication of Xn=0.times.0342h and C1=0.times.54h. The CLB is 0.times.034 
and the TLB is 0.times.2. In this instance, there is a cache hit. Cache output 
is 0.times.11100, the entry made above. The RAM look up using the TLB is 
0.times.A8. The value retrieved from the RAM lookup table is based on the 
difference between the initial TLB and the subsequent TLB. Since multiplicand 
TLB=0.times.2 is bigger than the Cache TLB=0.times.0, the operator is add. Had 
the multiplicand TLB been smaller, the operator would be a subtract. Thus, the 
final product is 0.times.111000+0.times.A8=0.times.111A8. <BR><BR>In an 
alternate embodiment, the high speed multiplier is configured to eliminate the 
decision of either adding or subtracting the value from the RAM lookup table. 
Instead the system is biased to either always add or always subtract a value 
from the value retrieved from cache. For example, take the multiplication of 372 
by 6 which equals 2232. The CLB can be the first two numbers of the 
multiplicand, i.e. 37, while the TLB is the last value, i.e. 2. If no cache hit 
occurs, a standard multiplier is used to produce the result. In one embodiment, 
a new value is formed with the existing CLB 37 and where all additional bits are 
set at zero, i.e. 370. Then the product of 370 and 6, i.e. 2220, is stored in 
cache. For the next multiplication, say 378 times 6, a cache hit occurs because 
the CLB 37 is present in both the present and previous multiplication. The 
product of 2220 is retrieved from cache. Further, the product of the TLB 8 and 
the constant 6, i.e. 48, is retrieved from the RAM lookup table and added to the 
retrieved value of 2220 producing a final value of 2268. When the values of the 
non-CLB bits are set to zero, the value from the RAM table is always added to 
the retrieved value. Alternatively, the value of the non-CBL bits can be set to 
9 before the product is stored in cache. For example, the product of 372 times 6 
would initially be stored as 379 times 6, i.e. 2274. The difference is then 
subtracted from 2274. In this situation, it is helpful to change the RAM table 
slightly. One could subtract the actual TLB 2 from the stored TLB 9 and then 
lookup the value of that difference, i.e. 7, times the constant 6 and then 
subtract that product, i.e 42, from the stored value of 2274 to obtain the final 
product of 2232. But one of these steps can be eliminated by simply different 
values in the RAM table. The original TLB of 2 is known. Therefore, its entry in 
the table could already be 42, i.e (9-TLB)*C. The entire table could be 
constructed using the basic formula of (9-TLB)*C. This example uses common 
arabic numbers. Of course, the system can be implemented with any number system. 
For example, if the TLB is 4-bits in length, the binary representation could be 
forced to either 0000 or 1111. <BR><BR>In summary, if every operation results in 
a cache hit, it might take 5 ns to generate the final product. If every cache 
miss takes 15 ns and there is a 80% cache hit rate, then the overall performance 
will be 7 ns per multiplier. This is a significant improvement over the standard 
multiplication rates. If the hit rate is as high at 95%, then the overall system 
performance 5.50 ns. With a 5.5 ns multiplier, a DSP system can support 100+MHz 
sampling rate. <BR><BR>The description of the present invention has been 
presented for purposes of illustration and description, but is not limited to be 
exhaustive or limited to the invention in the form disclosed. Many modifications 
and variations will be apparent to those of ordinary skill in the art. The 
embodiment was chosen and described in order to best explain the principles of 
the invention the practical application to enable others of ordinary skill in 
the art to understand the invention for various embodiments with various 
modifications as are suited to the particular use contemplated. <BR><BR>
<CENTER><B>* * * * *</B></CENTER>
<HR>

<CENTER><!-- <A HREF=""><img border=0 src="/netaicon/PTO/patbib.gif" valign=middle></A> --><A 
href="http://patimg2.uspto.gov/.piw?Docid=06298369&amp;homeurl=http%3A%2F%2Fpatft.uspto.gov%2Fnetacgi%2Fnph-Parser%3FSect1%3DPTO1%2526Sect2%3DHITOFF%2526d%3DPALL%2526p%3D1%2526u%3D%2Fnetahtml%2Fsrchnum.htm%2526r%3D1%2526f%3DG%2526l%3D50%2526s1%3D6298369.WKU.%2526OS%3DPN%2F6298369%2526RS%3DPN%2F6298369&amp;PageNum=&amp;Rtype=&amp;SectionNum=&amp;idkey=335BCBFD7DE3"><IMG 
alt=[Image] src="United States Patent 6,298,369.files/image.gif" border=0 
valign="middle"></A> 
<TABLE>
  <TBODY>
  <TR>
    <TD align=middle><A 
      href="http://ebiz1.uspto.gov/vision-service/ShoppingCart_P/ShowShoppingCart?backUrl1=http%3A//164.195.100.11/netacgi/nph-Parser?Sect1%3DPTO1%26Sect2%3DHITOFF%26d%3DPALL%26p%3D1%26u%3D%2Fnetahtml%2Fsrchnum.htm%26r%3D1%26f%3DG%26l%3D50%26s1%3D6298369.WKU.%26OS%3DPN%2F6298369&amp;backLabel1=Back%20to%20Document%3A%206,298,369"><IMG 
      alt="[View Shopping Cart]" 
      src="United States Patent 6,298,369.files/cart.gif" border=0 
      valign="middle"></A> <A 
      href="http://ebiz1.uspto.gov/vision-service/ShoppingCart_P/AddToShoppingCart?docNumber=6,298,369&amp;backUrl1=http%3A//164.195.100.11/netacgi/nph-Parser?Sect1%3DPTO1%26Sect2%3DHITOFF%26d%3DPALL%26p%3D1%26u%3D%2Fnetahtml%2Fsrchnum.htm%26r%3D1%26f%3DG%26l%3D50%26s1%3D6298369.WKU.%26OS%3DPN%2F6298369&amp;backLabel1=Back%20to%20Document%3A%206,298,369"><IMG 
      alt="[Add to Shopping Cart]" 
      src="United States Patent 6,298,369.files/order.gif" border=0 
      valign="middle"></A> </TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&amp;Sect2=HITOFF&amp;d=PALL&amp;p=1&amp;u=/netahtml/srchnum.htm&amp;r=1&amp;f=G&amp;l=50&amp;s1=6298369.WKU.&amp;OS=PN/6298369&amp;RS=PN/6298369#top"><IMG 
      alt=[Top] src="United States Patent 6,298,369.files/top.gif" border=0 
      valign="middle"></A> </TD></TR></TBODY></TABLE><A name=bottom></A><A 
href="http://www.uspto.gov/patft/index.html"><IMG alt=[Home] 
src="United States Patent 6,298,369.files/home.gif" border=0 
valign="middle"></A> <A 
href="http://patft.uspto.gov/netahtml/search-bool.html"><IMG 
alt="[Boolean Search]" src="United States Patent 6,298,369.files/boolean.gif" 
border=0 valign="middle"></A> <A 
href="http://patft.uspto.gov/netahtml/search-adv.htm"><IMG alt="[Manual Search]" 
src="United States Patent 6,298,369.files/manual.gif" border=0 
valign="middle"></A> <A href="http://patft.uspto.gov/netahtml/srchnum.htm"><IMG 
alt="[Number Search]" src="United States Patent 6,298,369.files/number.gif" 
border=0 valign="middle"></A> <A 
href="http://www.uspto.gov/patft/help/help.htm"><IMG alt=[Help] 
src="United States Patent 6,298,369.files/help.gif" border=0 
valign="middle"></A> </CENTER></BODY></HTML>
